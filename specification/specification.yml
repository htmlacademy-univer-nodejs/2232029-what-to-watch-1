openapi: 3.0.3
info:
  title: API сервер для личного проекта «Что посмотреть».
  description: |-
    * Список ресурсов и маршрутов сервера «Что посмотреть».
  version: 1.0.0
tags:
  - name: users
    description: Действия с пользователем.
  - name: films
    description: Действия с фильмами.
  - name: comments
    description: Действия с комментариями.

paths:
  /users/register:
    post:
      tags:
        - users
      summary: Создание нового пользователя
      description: Регистрирует нового пользователя.

      requestBody:
        description: Информация для создания нового пользователя.
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/createUser'
            encoding:
              avatar:
                contentType: image/png, image/jpeg
        required: true

      responses:
        "201":
          description: Пользователь зарегистрирован. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "409":
          description: Пользователь с таким email уже существует.

        "400":
          description: Не удалось обработать запрос, так как он представлен в неправильном формате или является некорректным.


  /users/login:
    post:
      tags:
        - users
      summary: Вход в закрытую часть приложения
      description: Авторизует пользователя на основе логина и пароля.

      requestBody:
        required: true
        description: Логин и пароль авторизующегося пользователя.
        content:
          application/json:
            schema:
              type: object

              properties:
                login:
                  type: string
                  example: yana@mail.ru

                password:
                  type: string
                  example: 123456

      responses:
        "200":
          description: >
            Успешно авторизован.
            Объект с токеном.
            Клиент использует этот токен для отправки любых запросов. Токен передаётся в заголовках.
          content:
            application/json:
              schema:
                type: object

                properties:
                  token:
                    type: string
                    format: jwt

        "403":
          description: Неправильный логин или пароль.


    get:
      tags:
        - users
      summary: Проверка состояния пользователя
      description: Возвращает информацию по авторизованному пользователю.

      parameters:
        - in: cookie
          name: Authorization
          required: true
          schema:
            type: string
            format: Bearer jwt

      responses:
        "200":
          description: Успешно. Информация о пользователе.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "401":
          description: Невалидный токен. Пользователь не авторизован.

  /films/create:
    post:
      tags:
        - films
      summary: Добавление нового фильма
      description: Добавляет новый фильм.

      requestBody:
        description: Информация для добавления нового фильма.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createFilm'
        required: true

      responses:
        "201":
          description: Фильм добавлен. Объект фильма.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/film'

        "400":
          description: Не удалось обработать запрос, так как он представлен в неправильном формате или является некорректным.

        "401":
          description: Пользователь не авторизован. Добавлять новые фильмы могут только авторизованные клиенты.

  /films/{filmId}:
    get:
      tags:
        - films
      summary: Получение детальной информации по фильму
      description: Получает детальную информацию по определенному фильму.

      parameters:
        - in: path
          name: filmId
          schema:
            type: string
            format: uuid
          required: true
          description: Film id to get.

      responses:
        "200":
          description: Успешно. Детальная информация по фильму.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/film'

        "404":
          description: Фильма с данным id не существует.

    patch:
      tags:
        - films
      summary: Редактирование карточки фильма
      description: Редактирует карточку фильма, созданную пользователем.

      parameters:
        - in: header
            name: Authorization
            required: true
            schema:
              type: string
              format: Bearer jwt

      requestBody:
        description: Полный набор информации и идентификатор редактируемого фильма.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateFilm'
        required: true

      responses:
        "200":
          description: Фильм обновлен. Новый объект фильма.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/film'

        "400":
          description: Не удалось обработать запрос, так как он представлен в неправильном формате или является некорректным.

        "401":
          description: Пользователь не авторизован. Редактировать карточки фильмов могут только авторизованные клиенты.

        "403":
          description: Пользователь, пытающийся редактировать карточку фильма, не является её владельцем, поэтому ему запрещено её редактировать.

        "404":
          description: Фильма с данным id не существует.


    delete:
      tags:
        - films
      summary: Удаление карточки фильма
      description: Удаляет карточку фильма, созданную пользователем

      parameters:
        - in: path
          name: filmId
          schema:
            type: string
            format: uuid
          required: true
          description: Film id to delete.
        - in: header
            name: Authorization
            required: true
            schema:
              type: string
              format: Bearer jwt

      requestBody:
        description: Id пользователя, пытающегося удалить фильм.
        content:
          application/json:
            schema:
              type: object

      responses:
        "204":
          description: Фильм успешно удален.

        "401":
          description: Пользователь не авторизован. Удалять карточки фильмов могут только авторизованные клиенты.

        "403":
          description: Пользователь, пытающийся удалить карточку фильма, не является её владельцем, поэтому ему запрещено её удалять.

        "404":
          description: Фильма с данным id не существует.

  /films?limit=60&genre=comedy:
    get:
      tags:
        - films
      summary: Получение списка фильмов
      description: Возвращает список фильмов (по умолчанию не больше 60).

      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 60
            example: 10

        - in: query
          name: genre
          schema:
            type: string
            enum: [ comedy, crime, documentary, drama, horror, family, romance, scifi, thriller ]
            example: comedy

      responses:
        "200":
          description: Успешно. Список фильмов.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/filmListItem'

        "400":
          description: Не удалось обработать запрос, так как он представлен в неправильном формате или является некорректным.


  /films/promo:
    get:
      tags:
        - films
      summary: Получение промо-фильма
      description: Получение детальной информации по промо фильму.

      responses:
        "200":
          description: Успешно. Детальная информация по промо фильму.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/film'


  /films/watch:
    get:
      tags:
        - films
      summary: Получить список фильмов «К просмотру»
      description: Возвращает список фильмов, добавленных к просмотру


      responses:
        "200":
          description: Успешно. Фильмы, добавленные к просмотру.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/filmListItem'

        "401":
          description: Пользователь не авторизован. Запрос отклонен.


    post:
      tags:
        - films
      summary: Добавить фильм в список "К просмотру"
      description: Добавляет фильм в список "К просмотру"

      requestBody:
        description: Id фильма, который добавляют в список.
        content:
          application/json:
            schema:
              type: object

              properties:
                filmId:
                  type: string
                  format: uuid
                  example: 6329c3d6a04ab1061c6425ease8u342

              required:
                - filmId

      responses:
        "201":
          description: Успешно. Фильм добавлен в список "К просмотру".

        "401":
          description: Пользователь не авторизован. Запрос отклонен.


    delete:
      tags:
        - films
      summary: Удалить фильм из списка "К просмотру"
      description: Удаляет фильм из списка "К просмотру"

      requestBody:
        description: Id этого фильма.
        content:
          application/json:
            schema:
              type: object

              properties:
                filmId:
                  type: string
                  format: uuid
                  example: 6329c3d6a04ab1061c6425ease8u342

              required:
                - filmId

      responses:
        "204":
          description: Успешно. Фильм удален из списка "К просмотру".

        "401":
          description: Пользователь не авторизован. Запрос отклонен.


  /films/{filmId}/comments:
    get:
      tags:
        - comments
      summary: Получить список комментариев для определённого фильма
      description: Возвращает список комментариев для определенного фильма.

      parameters:
        - in: path
          name: filmId
          schema:
            type: string
            format: uuid
          required: true
          description: Film id to get comments.

      responses:
        "200":
          description: Успешно. Список комментариев к фильму.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/comment'

        "404":
          description: Фильм с таким id не существует.


  /comments:
    post:
      tags:
        - comments
      summary: Добавить новый комментарий к определённому фильму
      description: Добавляет новый комментарий к определенному фильму.

      requestBody:
        description: Id фильма, к которому добавляют комментарий, и сам комментарий.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/comment'
                - type: object
                  properties:
                    filmId:
                      type: string
                      format: uuid
                      example: 6329c3d6a04ab1061c6425ea
                  required:
                    - filmId

      responses:
        "200":
          description: Успешно. Комментарий добавлен.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'

        "400":
          description: Не удалось обработать запрос, так как он представлен в неправильном формате или является некорректным.

        "401":
          description: Пользователь не авторизован. Запрос отклонен.

        "404":
          description: Фильм с данным id не найден.


components:
  schemas:
    createUser:
      type: object

      properties:
        email:
          type: string
          format: email
          example: yana@mail.ru

        name:
          type: string
          minLength: 1
          maxLength: 15
          example: Yana

        password:
          type: string
          minLength: 6
          maxLength: 12
          example: 123456

        avatar:
          type: string
          format: binary

          required:
            - email
            - password
            - name

    user:
      type: object

      properties:
        id:
          type: string
          format: uuid
          example: 6329c3d6a04ab1061c6425ea

        email:
          type: string
          example: yana@mail.ru

        avatar:
          type: string
          format: uri
          pattern: ([^\s]+(\.(jpg|png))$)
          example: /upload/avatar.png

    CreateFilmDto:
      type: object

      properties:
        title:
          type: string
          minLength: 2
          maxLength: 100
          example: Голодные игры

        description:
          type: string
          minLength: 20
          maxLength: 1024
          example: Деспотичное государство ежегодно устраивает показательные игры на выживание, за которыми в прямом эфире следит весь мир.

        publicationDate:
          type: string
          format: date-time
          example: 2022-10-21T22:55:33.903Z

        genre:
          type: string
          enum: [ comedy, crime, documentary, drama, horror, family, romance, scifi, thriller ]
          example: comedy

        releaseYear:
          type: integer
          minimum: 1895
          maximum: 2022
          example: 2013

        previewLink:
          type: string
          format: url
          example: https://www.what-to-watch.ru/hunger_games_preview

        link:
          type: string
          format: url
          example: https://www.what-to-watch.ru/hunger_games

        actors:
          type: array
          items:
            type: string
          minItems: 1
          uniqueItems: true
          example: [ Дженнифер Лоуренс, Джош Хатчерсон, Лиам Хемсворт ]

        producer:
          type: string
          minLength: 2
          maxLength: 50
          example: Гэри Росс

        durationInMinutes:
          type: number
          minimum: 0.1

        posterLink:
          type: string
          format: uri
          pattern: ([^\s]+(\.jpg)$)
          example: hunger_games_poster.jpg

        backgroundImageLink:
          type: string
          format: uri
          pattern: ([^\s]+(\.jpg)$)
          example: hunger_games_bg.jpg

        backgroundColor:
          type: string
          example: green

      required:
        - title
        - description
        - publicationDate
        - genre
        - releaseYear
        - previewLink
        - link
        - actors
        - director
        - durationInMinutes
        - posterLink
        - backgroundImageLink
        - backgroundColor

    film:
      type: object

      properties:
        title:
          type: string
          minLength: 2
          maxLength: 100
          example: Голодные игры

        description:
          type: string
          minLength: 20
          maxLength: 1024
          example: Деспотичное государство ежегодно устраивает показательные игры на выживание, за которыми в прямом эфире следит весь мир.

        publicationDate:
          type: string
          format: date-time
          example: 2022-10-21T22:55:33.903Z

        genre:
          type: string
          enum: [ comedy, crime, documentary, drama, horror, family, romance, scifi, thriller ]
          example: comedy

        releaseYear:
          type: integer
          minimum: 1895
          maximum: 2022
          example: 2013

        rating:
          type: integer
          minimum: 0
          maximum: 10
          example: 5

        previewLink:
          type: string
          format: url
          example: https://www.what-to-watch.ru/hunger_games_preview

        link:
          type: string
          format: url
          example: https://www.what-to-watch.ru/hunger_games

        actors:
          type: array
          items:
            type: string
          minItems: 1
          uniqueItems: true
          example: [ Дженнифер Лоуренс, Джош Хатчерсон, Лиам Хемсворт ]

        producer:
          type: string
          minLength: 2
          maxLength: 50
          example: Гэри Росс

        durationInMinutes:
          type: number
          minimum: 0.1
          example: 60

        commentsCount:
          type: integer
          minimum: 0
          example: 10

        user:
          $ref: '#/components/schemas/user'

        posterLink:
          type: string
          format: uri
          pattern: ([^\s]+(\.jpg)$)
          example: hunger_games_poster.jpg

        backgroundImageLink:
          type: string
          format: uri
          pattern: ([^\s]+(\.jpg)$)
          example: hunger_games_bg.jpg

        backgroundColor:
          type: string
          example: green

      required:
        - title
        - description
        - publicationDate
        - genre
        - releaseYear
        - rating
        - previewLink
        - link
        - actors
        - producer
        - durationInMinutes
        - commentsCount
        - user
        - posterLink
        - backgroundImageLink
        - backgroundColor

    updateFilm:
      allOf:
        - $ref: '#/components/schemas/createFilm'
        - type: object
          properties:
            filmId:
              type: string
              format: uuid
              example: 6329c3d6a04ab1061c6425ea
          required:
            - filmId


    filmSearchItem:
      type: object

      properties:
        title:
          type: string
          minLength: 2
          maxLength: 100
          example: Голодные игры

        publicationDate:
          type: string
          format: date-time
          example: 2022-10-21T22:55:33.903Z

        genre:
          type: string
          enum: [ comedy, crime, documentary, drama, horror, family, romance, scifi, thriller ]
          example: comedy

        previewLink:
          type: string
          format: url
          example: https://www.what-to-watch.ru/hunger_games_preview

        user:
          $ref: '#/components/schemas/user'

        posterLink:
          type: string
          format: uri
          pattern: ([^\s]+(\.jpg)$)
          example: hunger_games_poster.jpg

        commentsCount:
          type: integer
          minimum: 0
          example: 10

      required:
        - title
        - publicationDate
        - genre
        - previewLink
        - user
        - posterLink
        - commentsCount


    comment:
      type: object

      properties:
        text:
          type: string
          minLength: 5
          maxLength: 1024
          example: Супер крутой фильм!

        rating:
          type: integer
          minimum: 0
          maximum: 10
          example: 10


      required:
        - text
        - rating
